{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "690bdf3b-ad48-4046-a2b8-59f303bfad62",
   "metadata": {},
   "source": [
    "Q1. Explain the difference between simple linear regression and multiple linear regression. Provide an\n",
    "example of each.\n",
    "\n",
    "Simple Linear Regression\n",
    "Definition: Simple linear regression is a statistical method that models the relationship between two variables by fitting a linear equation to observed data. One variable is the independent variable (predictor), and the other is the dependent variable (response).\n",
    "Equation:\n",
    "Y=a+bX\n",
    "\n",
    "( Y ) is the dependent variable.\n",
    "( X ) is the independent variable.\n",
    "( a ) is the intercept.\n",
    "( b ) is the slope of the line.\n",
    "\n",
    "Example: Suppose you want to predict a personâ€™s weight based on their height. Here, height is the independent variable (( X )), and weight is the dependent variable (( Y ))."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "56285d2a-319c-4084-98e2-7b430ac50531",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# Sample data\n",
    "height = np.array([150, 160, 170, 180, 190]).reshape(-1, 1)\n",
    "weight = np.array([50, 60, 65, 70, 80])\n",
    "\n",
    "# Create and fit the model\n",
    "model = LinearRegression()\n",
    "model.fit(height, weight)\n",
    "\n",
    "# Predict\n",
    "predicted_weight = model.predict(height)\n",
    "\n",
    "# Plot\n",
    "plt.scatter(height, weight, color='blue')\n",
    "plt.plot(height, predicted_weight, color='red')\n",
    "plt.xlabel('Height (cm)')\n",
    "plt.ylabel('Weight (kg)')\n",
    "plt.title('Simple Linear Regression')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72383826-f468-4c8a-be56-434158a48131",
   "metadata": {},
   "source": [
    "Multiple Linear Regression\n",
    "Definition: Multiple linear regression is an extension of simple linear regression that uses two or more independent variables to predict the dependent variable.\n",
    "\n",
    "Equation:\n",
    "\n",
    "Y=a+b1â€‹X1â€‹+b2â€‹X2â€‹+â€¦+bpâ€‹Xpâ€‹\n",
    "\n",
    "( Y ) is the dependent variable.\n",
    "\n",
    "( X_1, X_2, \\ldots, X_p ) are the independent variables.\n",
    "\n",
    "( a ) is the intercept.\n",
    "\n",
    "( b_1, b_2, \\ldots, b_p ) are the coefficients for each independent variable.\n",
    "\n",
    "Example: Suppose you want to predict a personâ€™s weight based on their height and age. Here, height and age are the independent variables (( X_1 ) and ( X_2 )), and weight is the dependent variable (( Y ))."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "35f7c028-3ffe-4358-8648-3d671ed6df04",
   "metadata": {},
   "outputs": [
    {
     "ename": "RuntimeError",
     "evalue": "Error in qhull Delaunay triangulation calculation: singular input data (exitcode=2); use python verbose option (-v) to see original qhull error.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[2], line 24\u001b[0m\n\u001b[1;32m     22\u001b[0m ax \u001b[38;5;241m=\u001b[39m fig\u001b[38;5;241m.\u001b[39madd_subplot(\u001b[38;5;241m111\u001b[39m, projection\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m3d\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     23\u001b[0m ax\u001b[38;5;241m.\u001b[39mscatter(height, age, weight, color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mblue\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m---> 24\u001b[0m \u001b[43max\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mplot_trisurf\u001b[49m\u001b[43m(\u001b[49m\u001b[43mheight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mage\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpredicted_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mred\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43malpha\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0.5\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     25\u001b[0m ax\u001b[38;5;241m.\u001b[39mset_xlabel(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHeight (cm)\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     26\u001b[0m ax\u001b[38;5;241m.\u001b[39mset_ylabel(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAge (years)\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/mpl_toolkits/mplot3d/axes3d.py:1770\u001b[0m, in \u001b[0;36mAxes3D.plot_trisurf\u001b[0;34m(self, color, norm, vmin, vmax, lightsource, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1766\u001b[0m cmap \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcmap\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[1;32m   1767\u001b[0m shade \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mshade\u001b[39m\u001b[38;5;124m'\u001b[39m, cmap \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[1;32m   1769\u001b[0m tri, args, kwargs \u001b[38;5;241m=\u001b[39m \\\n\u001b[0;32m-> 1770\u001b[0m     \u001b[43mTriangulation\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_from_args_and_kwargs\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1771\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1772\u001b[0m     z \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mZ\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/matplotlib/tri/triangulation.py:161\u001b[0m, in \u001b[0;36mTriangulation.get_from_args_and_kwargs\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    159\u001b[0m     x, y, triangles, mask, args, kwargs \u001b[38;5;241m=\u001b[39m \\\n\u001b[1;32m    160\u001b[0m         Triangulation\u001b[38;5;241m.\u001b[39m_extract_triangulation_params(args, kwargs)\n\u001b[0;32m--> 161\u001b[0m     triangulation \u001b[38;5;241m=\u001b[39m \u001b[43mTriangulation\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtriangles\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmask\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    162\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m triangulation, args, kwargs\n",
      "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/matplotlib/tri/triangulation.py:58\u001b[0m, in \u001b[0;36mTriangulation.__init__\u001b[0;34m(self, x, y, triangles, mask)\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mis_delaunay \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m     55\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m triangles \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     56\u001b[0m     \u001b[38;5;66;03m# No triangulation specified, so use matplotlib._qhull to obtain\u001b[39;00m\n\u001b[1;32m     57\u001b[0m     \u001b[38;5;66;03m# Delaunay triangulation.\u001b[39;00m\n\u001b[0;32m---> 58\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtriangles, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_neighbors \u001b[38;5;241m=\u001b[39m \u001b[43m_qhull\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdelaunay\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     59\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mis_delaunay \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m     60\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     61\u001b[0m     \u001b[38;5;66;03m# Triangulation specified. Copy, since we may correct triangle\u001b[39;00m\n\u001b[1;32m     62\u001b[0m     \u001b[38;5;66;03m# orientation.\u001b[39;00m\n",
      "\u001b[0;31mRuntimeError\u001b[0m: Error in qhull Delaunay triangulation calculation: singular input data (exitcode=2); use python verbose option (-v) to see original qhull error."
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# Sample data\n",
    "height = np.array([150, 160, 170, 180, 190])\n",
    "age = np.array([20, 25, 30, 35, 40])\n",
    "weight = np.array([50, 60, 65, 70, 80])\n",
    "\n",
    "# Combine height and age into a single 2D array\n",
    "X = np.column_stack((height, age))\n",
    "\n",
    "# Create and fit the model\n",
    "model = LinearRegression()\n",
    "model.fit(X, weight)\n",
    "\n",
    "# Predict\n",
    "predicted_weight = model.predict(X)\n",
    "\n",
    "# Plot\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "ax.scatter(height, age, weight, color='blue')\n",
    "ax.plot_trisurf(height, age, predicted_weight, color='red', alpha=0.5)\n",
    "ax.set_xlabel('Height (cm)')\n",
    "ax.set_ylabel('Age (years)')\n",
    "ax.set_zlabel('Weight (kg)')\n",
    "ax.set_title('Multiple Linear Regression')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "647514dd-f40d-4236-8195-86e09fb78d4d",
   "metadata": {},
   "source": [
    "Key Differences\n",
    "Number of Independent Variables: Simple linear regression uses one independent variable, while multiple linear regression uses two or more.\n",
    "Complexity: Multiple linear regression is more complex and can model relationships involving multiple factors, providing a more comprehensive analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "371777f4-ff58-41c7-ba1f-8d5fa39df89c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "0b55734c-dbb9-4039-9a3a-0c836e9426c6",
   "metadata": {},
   "source": [
    "Q2. Discuss the assumptions of linear regression. How can you check whether these assumptions hold in\n",
    "a given dataset?\n",
    "\n",
    "Assumptions of Linear Regression\n",
    "\n",
    "Linearity: The relationship between the independent and dependent variables should be linear.\n",
    "\n",
    "Check: Create scatter plots of the independent variables against the dependent variable. If the relationship is linear, the points should roughly form a straight line.\n",
    "\n",
    "Independence: The residuals (errors) should be independent.\n",
    "\n",
    "Check: For time series data, plot the residuals over time. You can also use the Durbin-Watson test to check for autocorrelation.\n",
    "\n",
    "Homoscedasticity: The residuals should have constant variance at every level of the independent variables.\n",
    "\n",
    "Check: Plot the residuals against the predicted values. If the variance of the residuals is constant, the plot should show a random scatter without any clear pattern.\n",
    "\n",
    "Normality: The residuals should be normally distributed.\n",
    "\n",
    "Check: Use a Q-Q plot (quantile-quantile plot) to compare the distribution of residuals to a normal distribution. You can also use statistical tests like the Shapiro-Wilk test.\n",
    "\n",
    "No Multicollinearity (for multiple linear regression): The independent variables should not be too highly correlated with each other.\n",
    "\n",
    "Check: Calculate the Variance Inflation Factor (VIF) for each independent variable. VIF values above 10 indicate high multicollinearity. You can also examine a correlation matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9bc50f7-cead-4e00-880d-29cb5741966d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8c0b7d7c-7f8e-4c13-960b-dc66940d7acb",
   "metadata": {},
   "source": [
    "Q3. How do you interpret the slope and intercept in a linear regression model? Provide an example using\n",
    "a real-world scenario.\n",
    "\n",
    "Interpreting the Slope and Intercept in Linear Regression\n",
    "\n",
    "Slope: The slope of the regression line represents the change in the dependent variable (( Y )) for a one-unit change in the independent variable (( X )). It indicates the strength and direction of the relationship between the variables.\n",
    "\n",
    "Intercept: The intercept is the value of the dependent variable (( Y )) when the independent variable (( X )) is zero. It represents the starting point or baseline value of ( Y ).\n",
    "\n",
    "Example: Predicting House Prices\n",
    "\n",
    "Letâ€™s consider a real-world scenario where we want to predict house prices based on the size of the house (in square feet).\n",
    "\n",
    "Equation:\n",
    "\n",
    "Price=a+bÃ—Size\n",
    "\n",
    "( \\text{Price} ) is the dependent variable (house price).\n",
    "\n",
    "( \\text{Size} ) is the independent variable (size of the house in square feet).\n",
    "\n",
    "( a ) is the intercept.\n",
    "\n",
    "( b ) is the slope.\n",
    "\n",
    "\n",
    "Suppose we fit a linear regression model and get the following equation:\n",
    "\n",
    "Price=50,000+200Ã—Size\n",
    "\n",
    "Interpretation:\n",
    "\n",
    "Intercept (50,000): When the size of the house is zero square feet, the predicted price is $50,000. This might not make practical sense in this context, but it serves as a baseline value.\n",
    "\n",
    "Slope (200): For each additional square foot of house size, the price increases by $200."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0c5f6d4-21e9-4b45-9cec-3129d2123c19",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "48edeb8c-49ae-4109-a74a-90dbd6d33ce0",
   "metadata": {},
   "source": [
    "Q4. Explain the concept of gradient descent. How is it used in machine learning?\n",
    "\n",
    "Gradient Descent is an optimization algorithm used to minimize the cost function in machine learning models. It iteratively adjusts the model parameters to find the values that minimize the cost function, which measures the difference between the predicted and actual values.\n",
    "\n",
    "How Gradient Descent Works\n",
    "\n",
    "Initialization: Start with initial values for the parameters (often random).\n",
    "\n",
    "Compute the Gradient: Calculate the gradient (partial derivatives) of the cost function with respect to each parameter. The gradient indicates the direction and rate of the steepest increase in the cost function.\n",
    "\n",
    "Update Parameters: Adjust the parameters in the opposite direction of the gradient to reduce the cost function. The size of the adjustment is controlled by the learning rate (( \\alpha )).\n",
    "\n",
    "Iterate: Repeat the process until the cost function converges to a minimum value or a predefined number of iterations is reached.\n",
    "\n",
    "Gradient Descent Formula\n",
    "\n",
    "The parameter update rule for gradient descent is:\n",
    "\n",
    "Î¸j: =Î¸j âˆ’ Î±(âˆ‚J(Î¸)/âˆ‚Î¸j)\n",
    "\n",
    "( \\theta_j ) is the parameter being updated.\n",
    "\n",
    "( \\alpha ) is the learning rate.\n",
    "\n",
    "( \\frac{\\partial J(\\theta)}{\\partial \\theta_j} ) is the partial derivative of the cost function ( J(\\theta) ) with respect to ( \\theta_j ).\n",
    "\n",
    "Types of Gradient Descent\n",
    "\n",
    "Batch Gradient Descent: Uses the entire dataset to compute the gradient at each step.\n",
    "\n",
    "Stochastic Gradient Descent (SGD): Uses one random sample from the dataset to compute the gradient at each step.\n",
    "\n",
    "Mini-Batch Gradient Descent: Uses a small random subset (mini-batch) of the dataset to compute the gradient at each step.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e6ee06d-4555-4100-9d09-00f04e14b76f",
   "metadata": {},
   "source": [
    "Usage in Machine Learning\n",
    "\n",
    "Gradient descent is widely used in training machine learning models, including:\n",
    "\n",
    "Linear Regression: To find the best-fit line.\n",
    "\n",
    "Logistic Regression: To find the best decision boundary.\n",
    "\n",
    "Neural Networks: To optimize weights and biases.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15055e83-8c3d-4735-9478-c2d5f869621c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e23b6a78-f5d2-430c-8c3b-2a08f748d9a7",
   "metadata": {},
   "source": [
    "Q5. Describe the multiple linear regression model. How does it differ from simple linear regression?\n",
    "\n",
    "Multiple Linear Regression Model\n",
    "\n",
    "Multiple Linear Regression is an extension of simple linear regression that models the relationship between a dependent variable and two or more independent variables. It aims to understand how multiple factors collectively influence the dependent variable.\n",
    "\n",
    "Equation:\n",
    "\n",
    "Y=a+b1â€‹X1â€‹+b2â€‹X2â€‹+â€¦+bpâ€‹Xpâ€‹\n",
    "\n",
    "( Y ) is the dependent variable.\n",
    "\n",
    "( X_1, X_2, \\ldots, X_p ) are the independent variables.\n",
    "\n",
    "( a ) is the intercept.\n",
    "\n",
    "( b_1, b_2, \\ldots, b_p ) are the coefficients for each independent variable.\n",
    "\n",
    "Example: Predicting House Prices\n",
    "\n",
    "Suppose you want to predict house prices based on multiple factors such as size, number of bedrooms, and age of the house. Here, size, number of bedrooms, and age are the independent variables (( X_1, X_2, X_3 )), and house price is the dependent variable (( Y )).\n",
    "\n",
    "Equation:\n",
    "\n",
    "Price = a+b1Ã—Size + b2Ã—Bedrooms + b3Ã—Age\n",
    "\n",
    "Differences Between Simple and Multiple Linear Regression\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Number of Independent Variables:\n",
    "\n",
    "Simple Linear Regression: Involves one independent variable.\n",
    "\n",
    "Multiple Linear Regression: Involves two or more independent variables.\n",
    "\n",
    "\n",
    "\n",
    "Complexity:\n",
    "\n",
    "Simple Linear Regression: Simpler model, easier to interpret.\n",
    "\n",
    "Multiple Linear Regression: More complex, can capture the combined effect of multiple factors.\n",
    "\n",
    "\n",
    "\n",
    "Equation:\n",
    "\n",
    "Simple Linear Regression: ( Y = a + bX )\n",
    "\n",
    "Multiple Linear Regression: ( Y = a + b_1X_1 + b_2X_2 + \\ldots + b_pX_p )\n",
    "\n",
    "\n",
    "\n",
    "Interpretation:\n",
    "\n",
    "Simple Linear Regression: The slope represents the change in ( Y ) for a one-unit change in ( X ).\n",
    "\n",
    "Multiple Linear Regression: Each coefficient represents the change in ( Y ) for a one-unit change in the corresponding ( X ), holding other variables constant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "794d1a5e-a6fb-4391-835c-7668f7ccd915",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "d6f4d5b0-dba3-4c60-9291-6eb1b8e2db54",
   "metadata": {},
   "source": [
    "Q6. Explain the concept of multicollinearity in multiple linear regression. How can you detect and\n",
    "address this issue?\n",
    "\n",
    "Concept of Multicollinearity\n",
    "\n",
    "Multicollinearity occurs in multiple linear regression when two or more independent variables are highly correlated with each other. This high correlation means that the independent variables provide redundant information about the dependent variable, making it difficult to isolate the individual effect of each predictor.\n",
    "\n",
    "Problems Caused by Multicollinearity\n",
    "\n",
    "Unstable Coefficients: The estimated coefficients can change significantly with small changes in the model.\n",
    "\n",
    "Reduced Precision: The standard errors of the coefficients increase, making it harder to determine the significance of each predictor.\n",
    "\n",
    "Interpretation Issues: It becomes challenging to interpret the effect of each independent variable on the dependent variable.\n",
    "\n",
    "Detecting Multicollinearity\n",
    "\n",
    "Correlation Matrix: Calculate the correlation coefficients between all pairs of independent variables. High correlation values (close to 1 or -1) indicate potential multicollinearity.\n",
    "\n",
    "Variance Inflation Factor (VIF): VIF measures how much the variance of a regression coefficient is inflated due to multicollinearity. A VIF value greater than 10 suggests high multicollinearity1.\n",
    "\n",
    "Tolerance: Tolerance is the reciprocal of VIF. A tolerance value less than 0.1 indicates high multicollinearity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6aa5ccb-d8cf-46f7-b72d-5dde95efb09a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "5ac6d11c-84b1-4666-b66a-dbd37ab909f6",
   "metadata": {},
   "source": [
    "Q7. Describe the polynomial regression model. How is it different from linear regression?\n",
    "\n",
    "Polynomial Regression Model\n",
    "Polynomial Regression is a type of regression analysis where the relationship between the independent variable ( X ) and the dependent variable ( Y ) is modeled as an ( n )-th degree polynomial. This allows for capturing non-linear relationships between the variables.\n",
    "\n",
    "Equation:\n",
    "\n",
    "Y=a0 +a1X+ a2 X2+â€¦+anXn\n",
    "\n",
    "( Y ) is the dependent variable.\n",
    "\n",
    "( X ) is the independent variable.\n",
    "\n",
    "( a_0, a_1, \\ldots, a_n ) are the coefficients.\n",
    "\n",
    "Differences Between Linear and Polynomial Regression\n",
    "\n",
    "\n",
    "Nature of Relationship:\n",
    "\n",
    "Linear Regression: Assumes a straight-line relationship between the dependent and independent variables.\n",
    "\n",
    "Polynomial Regression: Can model non-linear relationships by fitting a polynomial equation to the data.\n",
    "\n",
    "\n",
    "\n",
    "Equation:\n",
    "\n",
    "Linear Regression: ( Y = a + bX )\n",
    "\n",
    "Polynomial Regression: ( Y = a_0 + a_1X + a_2X^2 + \\ldots + a_nX^n )\n",
    "\n",
    "\n",
    "\n",
    "Model Complexity:\n",
    "\n",
    "Linear Regression: Simpler, easier to interpret, fewer parameters.\n",
    "\n",
    "Polynomial Regression: More complex, higher-degree polynomials can model intricate patterns but may also lead to overfitting.\n",
    "\n",
    "\n",
    "\n",
    "Flexibility:\n",
    "\n",
    "Linear Regression: Limited to linear trends.\n",
    "\n",
    "Polynomial Regression: Offers greater flexibility, suitable for modeling curves and complex patterns.\n",
    "\n",
    "\n",
    "\n",
    "Example: Predicting House Prices\n",
    "\n",
    "Suppose you want to predict house prices based on the size of the house, but the relationship is non-linear.\n",
    "Linear Regression:\n",
    "\n",
    "Price = a+bÃ—Size\n",
    "\n",
    "Polynomial Regression:\n",
    "\n",
    "Price = a0 +a1Ã—Size +a2 Ã—Size2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8acf431b-fbfe-48f1-8654-942c8932cfa3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "6d8e6f0c-6e81-4d5e-a611-36d3d0995376",
   "metadata": {},
   "source": [
    "Q8. What are the advantages and disadvantages of polynomial regression compared to linear\n",
    "regression? In what situations would you prefer to use polynomial regression?\n",
    "\n",
    "Advantages and Disadvantages of Polynomial Regression Compared to Linear Regression\n",
    "\n",
    "Advantages of Polynomial Regression:\n",
    "\n",
    "Flexibility: Can model a wide range of relationships, including non-linear trends, by fitting a polynomial equation to the data.\n",
    "\n",
    "Better Fit: Can capture complex patterns and curves in the data, providing a better fit for non-linear relationships.\n",
    "\n",
    "Disadvantages of Polynomial Regression:\n",
    "\n",
    "Complexity: More complex and harder to interpret compared to linear regression.\n",
    "\n",
    "Overfitting: Prone to overfitting, especially with higher-degree polynomials, which can lead to poor generalization on new data.\n",
    "\n",
    "Advantages of Linear Regression:\n",
    "\n",
    "Simplicity: Easier to interpret and implement, with fewer parameters1.\n",
    "\n",
    "Less Prone to Overfitting: Generally less prone to overfitting compared to polynomial regression1.\n",
    "\n",
    "Disadvantages of Linear Regression:\n",
    "\n",
    "Limited to Linear Relationships: May underfit the data if the relationship between variables is non-linear1.\n",
    "\n",
    "When to Prefer Polynomial Regression\n",
    "\n",
    "You would prefer to use polynomial regression in the following situations:\n",
    "\n",
    "Non-Linear Relationships: When the relationship between the dependent and independent variables is non-linear and cannot be adequately captured by a straight line.\n",
    "Complex Patterns: When the data exhibits complex patterns or curves that a linear model cannot fit.\n",
    "Improved Fit: When a linear model underfits the data, and a polynomial model provides a significantly better fit.\n",
    "Example Scenario\n",
    "Scenario: Predicting the growth of a plant based on the amount of fertilizer used.\n",
    "\n",
    "Linear Regression: If the relationship between fertilizer and plant growth is approximately linear, a simple linear regression model would suffice.\n",
    "Polynomial Regression: If the relationship is more complex (e.g., plant growth increases rapidly with small amounts of fertilizer but levels off or decreases with excessive fertilizer), a polynomial regression model would be more appropriate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75325d8d-b227-4802-83c2-028cce361728",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58b928ba-82e2-4154-8aa2-e634578c6c42",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
